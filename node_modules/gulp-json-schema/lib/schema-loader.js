"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _setImmediate2 = require("babel-runtime/core-js/set-immediate");

var _setImmediate3 = _interopRequireDefault(_setImmediate2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _stripBom = require("strip-bom");

var _stripBom2 = _interopRequireDefault(_stripBom);

var _request = require("request");

var _request2 = _interopRequireDefault(_request);

var _normalizeUrl = require("normalize-url");

var _normalizeUrl2 = _interopRequireDefault(_normalizeUrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SchemaLoader = function () {
  function SchemaLoader(options) {
    (0, _classCallCheck3.default)(this, SchemaLoader);

    this.options = options || {};
    this.requestOptions = this.options.requestOptions || {};
  }

  (0, _createClass3.default)(SchemaLoader, [{
    key: "parseJSON",
    value: function parseJSON(json) {
      return JSON.parse((0, _stripBom2.default)(json));
    }
  }, {
    key: "loadLocalSchemaSync",
    value: function loadLocalSchemaSync(filePath) {
      var contents = _fs2.default.readFileSync(filePath, "utf8");
      return this.parseJSON(contents);
    }
  }, {
    key: "loadRemoteSchema",
    value: function loadRemoteSchema(uri) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        (0, _request2.default)(uri, _this.requestOptions, function (err, res, body) {
          if (err) {
            return reject(new Error("Failed to load schema \"" + uri + "\": " + (err.message || err)));
          }
          if (res.statusCode !== 200) {
            return reject(new Error("Failed to load schema \"" + uri + "\": HTTP status " + res.statusCode));
          }
          resolve(_this.parseJSON(body));
        });
      });
    }
  }, {
    key: "loadRemoteSchemas",
    value: function loadRemoteSchemas(uris) {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {
        var results = {};
        var queue = Array.prototype.slice.call(uris);
        var next = function next() {
          if (queue.length === 0) {
            return resolve(results);
          }

          var uri = (0, _normalizeUrl2.default)(queue.shift());
          if (results.hasOwnProperty(uri)) return (0, _setImmediate3.default)(next);

          _this2.loadRemoteSchema(uri).then(function (schema) {
            results[uri] = schema;
            (0, _setImmediate3.default)(next);
          }).catch(reject);
        };
        next();
      });
    }
  }]);
  return SchemaLoader;
}();

exports.default = SchemaLoader;
module.exports = exports['default'];
//# sourceMappingURL=schema-loader.js.map