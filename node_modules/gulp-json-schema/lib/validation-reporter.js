"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _figures = require("figures");

var _figures2 = _interopRequireDefault(_figures);

var _gulpUtil = require("gulp-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_OPTIONS = {
  silent: false,
  verbose: false,
  missing: "error",
  emitError: true
};

var ValidationReporter = function () {
  function ValidationReporter(options) {
    (0, _classCallCheck3.default)(this, ValidationReporter);

    this.options = (0, _assign2.default)({}, DEFAULT_OPTIONS, options);
    this.summary = {
      total: 0,
      valid: 0,
      invalid: 0,
      errors: 0,
      missing: 0
    };
  }

  (0, _createClass3.default)(ValidationReporter, [{
    key: "reportFile",
    value: function reportFile(file, result) {
      this.addResultToSummary(file, result);
      if (this.options.silent) return;

      if (this.isValidResult(result)) {
        if (result.missing.length > 0 && this.options.missing === "warn") {
          this.reportMissingsWarning(file, result.missing.length);
          this.reportMissing(result.missing, true);
        } else {
          this.reportValid(file);
        }
      } else {
        this.reportFailed(file, result.errors.length, result.missing.length);
        if (result.errors.length > 0) {
          this.reportErrors(result.errors);
        }
        if (result.missing.length > 0) {
          this.reportMissing(result.missing, false);
        }
      }
    }
  }, {
    key: "reportSummary",
    value: function reportSummary() {
      if (this.options.silent) return;

      if (this.summary.invalid > 0) {
        (0, _gulpUtil.log)(_gulpUtil.colors.red("Schema validation failed"), "for", _gulpUtil.colors.red(this.summary.invalid), "file(s)", "/", _gulpUtil.colors.magenta(this.summary.total), "file(s)");
      } else if (this.summary.valid > 0) {
        (0, _gulpUtil.log)(_gulpUtil.colors.green("Schema validation passed"), "for", _gulpUtil.colors.green(this.summary.valid), "file(s)", "/", _gulpUtil.colors.magenta(this.summary.total), "file(s)");
      } else {
        (0, _gulpUtil.log)(_gulpUtil.colors.yellow("No input files for schema validation"));
      }
    }
  }, {
    key: "checkAllPassed",
    value: function checkAllPassed() {
      if (!this.options.emitError) return;

      if (this.summary.invalid > 0) {
        throw new Error("There was schema validation error");
      }
    }
  }, {
    key: "addResultToSummary",
    value: function addResultToSummary(file, result) {
      this.summary.total++;
      if (this.isValidResult(result)) {
        this.summary.valid++;
      } else {
        this.summary.invalid++;
      }
      if (result.errors) {
        this.summary.errors += result.errors.length;
      }
      if (result.missing) {
        this.summary.missing += result.missing.length;
      }
    }
  }, {
    key: "isValidResult",
    value: function isValidResult(result) {
      return result.valid && (this.options.missing !== "error" || result.missing.length === 0);
    }
  }, {
    key: "reportValid",
    value: function reportValid(file) {
      if (!this.options.verbose) return;
      (0, _gulpUtil.log)(_gulpUtil.colors.green(_figures2.default.tick), _gulpUtil.colors.cyan(file.relative));
    }
  }, {
    key: "reportMissingsWarning",
    value: function reportMissingsWarning(file, missingCount) {
      (0, _gulpUtil.log)(_gulpUtil.colors.yellow(_figures2.default.warning), _gulpUtil.colors.cyan(file.relative), "has", _gulpUtil.colors.yellow(missingCount + " missing schema(s)"));
    }
  }, {
    key: "reportFailed",
    value: function reportFailed(file, errorCount, missingCount) {
      var results = [];
      if (errorCount > 0) {
        results.push(_gulpUtil.colors.red(errorCount + " validation error(s)"));
      }
      if (missingCount > 0) {
        results.push(_gulpUtil.colors.red(missingCount + " missing schema(s)"));
      }

      (0, _gulpUtil.log)(_gulpUtil.colors.red(_figures2.default.cross), _gulpUtil.colors.cyan(file.relative), results.length > 0 ? "has " + results.join(" and ") : "");
    }
  }, {
    key: "reportErrors",
    value: function reportErrors(errors) {
      var _this = this;

      errors.forEach(function (err) {
        _this.reportError(err);
      });
    }
  }, {
    key: "reportError",
    value: function reportError(error) {
      var _this2 = this;

      var indent = arguments.length <= 1 || arguments[1] === undefined ? "  " : arguments[1];

      (0, _gulpUtil.log)(indent, _gulpUtil.colors.red(_figures2.default.pointerSmall + " Error:"), error.message || "No error message provided by tv4");
      (0, _gulpUtil.log)(indent, _gulpUtil.colors.gray("  at", _gulpUtil.colors.blue(error.dataPath || "/"), "against schema", _gulpUtil.colors.blue(error.schemaPath || "/")));
      if (error.subErrors) {
        error.subErrors.forEach(function (err) {
          _this2.reportError(err, indent + "  ");
        });
      }
    }
  }, {
    key: "reportMissing",
    value: function reportMissing(missings, warning) {
      var indent = arguments.length <= 2 || arguments[2] === undefined ? "  " : arguments[2];

      missings.forEach(function (uri) {
        (0, _gulpUtil.log)(indent, warning ? _gulpUtil.colors.yellow(_figures2.default.pointerSmall + " Missing:") : _gulpUtil.colors.red(_figures2.default.pointerSmall + " Missing:"), uri);
      });
    }
  }]);
  return ValidationReporter;
}();

exports.default = ValidationReporter;
module.exports = exports['default'];
//# sourceMappingURL=validation-reporter.js.map