"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _tv = require("tv4");

var _tv2 = _interopRequireDefault(_tv);

var _schemaLoader = require("./schema-loader");

var _schemaLoader2 = _interopRequireDefault(_schemaLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_OPTIONS = {
  schema: null,
  schemas: null,
  formats: null,
  keywords: null,
  configure: null,
  loadMissingSchemas: false,
  checkRecursive: false,
  banUnknownProperties: false,
  loader: null
};

var SchemaValidator = function () {
  function SchemaValidator(options) {
    (0, _classCallCheck3.default)(this, SchemaValidator);

    this.options = options;
    this.loader = this.options.loader || new _schemaLoader2.default(this.options);
    this.schema = this.wrapSchema(this.options.schema);
    this.tv4 = _tv2.default.freshApi();

    if (options.schemas) {
      this.addSchemas(options.schemas);
    }
    if (options.formats) {
      this.tv4.addFormat(options.formats);
    }
    if (options.keywords) {
      this.defineKeywords(options.keywords);
    }
    if (options.configure) {
      options.configure.call(null, this.tv4, this.options);
    }
  }

  (0, _createClass3.default)(SchemaValidator, [{
    key: "wrapSchema",
    value: function wrapSchema(schemaOrFilePath) {
      if (typeof schemaOrFilePath === "string") {
        return this.loader.loadLocalSchemaSync(schemaOrFilePath);
      } else {
        return schemaOrFilePath;
      }
    }
  }, {
    key: "addSchemas",
    value: function addSchemas(schemas) {
      var _this = this;

      if (Array.isArray(schemas)) {
        schemas.forEach(function (s) {
          _this.tv4.addSchema(_this.wrapSchema(s));
        });
      } else {
        (0, _keys2.default)(schemas).forEach(function (k) {
          _this.tv4.addSchema(k, _this.wrapSchema(schemas[k]));
        });
      }
    }
  }, {
    key: "defineKeywords",
    value: function defineKeywords(keywords) {
      var _this2 = this;

      (0, _keys2.default)(keywords).forEach(function (k) {
        _this2.tv4.defineKeyword(k, keywords[k]);
      });
    }
  }, {
    key: "validateJSON",
    value: function validateJSON(json) {
      var _this3 = this;

      return new _promise2.default(function (resolve) {
        var data = _this3.loader.parseJSON(json);
        resolve(_this3.validate(data));
      });
    }
  }, {
    key: "validate",
    value: function validate(data) {
      var _this4 = this;

      return new _promise2.default(function (resolve) {
        var result = _this4.callValidateMultiple(data);

        if (result.missing && result.missing.length > 0 && _this4.options.loadMissingSchemas) {
          resolve(_this4.loadMissing(result.missing).then(function () {
            return _this4.callValidateMultiple(data);
          }));
          return;
        }

        resolve(result);
      });
    }
  }, {
    key: "callValidateMultiple",
    value: function callValidateMultiple(data) {
      return this.tv4.validateMultiple(data, this.schema, this.options.checkRecursive, this.options.banUnknownProperties);
    }
  }, {
    key: "loadMissing",
    value: function loadMissing(missings) {
      var _this5 = this;

      return this.loader.loadRemoteSchemas(missings).then(function (schemas) {
        (0, _keys2.default)(schemas).forEach(function (k) {
          _this5.tv4.addSchema(k, schemas[k]);
        });
      });
    }
  }]);
  return SchemaValidator;
}();

exports.default = SchemaValidator;
module.exports = exports['default'];
//# sourceMappingURL=schema-validator.js.map