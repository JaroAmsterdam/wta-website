{"version":3,"sources":["../src/schema-loader.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEqB,Y;AACnB,wBAAY,OAAZ,EAAqB;AAAA;;AACnB,SAAK,OAAL,GAAe,WAAW,EAA1B;AACA,SAAK,cAAL,GAAsB,KAAK,OAAL,CAAa,cAAb,IAA+B,EAArD;AACD;;;;8BAES,I,EAAM;AACd,aAAO,KAAK,KAAL,CAAW,wBAAS,IAAT,CAAX,CAAP;AACD;;;wCAEmB,Q,EAAU;AAC5B,UAAM,WAAW,aAAG,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CAAjB;AACA,aAAO,KAAK,SAAL,CAAe,QAAf,CAAP;AACD;;;qCAEgB,G,EAAK;AAAA;;AACpB,aAAO,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,+BAAQ,GAAR,EAAa,MAAK,cAAlB,EAAkC,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AACpD,cAAI,GAAJ,EAAS;AACP,mBAAO,OAAO,IAAI,KAAJ,8BAAoC,GAApC,aAA6C,IAAI,OAAJ,IAAe,GAA5D,EAAP,CAAP;AACD;AACD,cAAI,IAAI,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,mBAAO,OAAO,IAAI,KAAJ,8BAAoC,GAApC,wBAAyD,IAAI,UAA7D,CAAP,CAAP;AACD;AACD,kBAAQ,MAAK,SAAL,CAAe,IAAf,CAAR;AACD,SARD;AASD,OAVM,CAAP;AAWD;;;sCAEiB,I,EAAM;AAAA;;AACtB,aAAO,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAM,UAAU,EAAhB;AACA,YAAM,QAAQ,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,IAA3B,CAAd;AACA,YAAM,OAAO,SAAP,IAAO,GAAM;AACjB,cAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACtB,mBAAO,QAAQ,OAAR,CAAP;AACD;;AAED,cAAM,MAAM,4BAAa,MAAM,KAAN,EAAb,CAAZ;AACA,cAAI,QAAQ,cAAR,CAAuB,GAAvB,CAAJ,EAAiC,OAAO,4BAAa,IAAb,CAAP;;AAEjC,iBAAK,gBAAL,CAAsB,GAAtB,EACC,IADD,CACM,kBAAU;AACd,oBAAQ,GAAR,IAAe,MAAf;AACA,wCAAa,IAAb;AACD,WAJD,EAKC,KALD,CAKO,MALP;AAMD,SAdD;AAeA;AACD,OAnBM,CAAP;AAoBD;;;;;kBAlDkB,Y","file":"schema-loader.js","sourcesContent":["import fs from \"fs\";\nimport stripBOM from \"strip-bom\";\nimport request from \"request\";\nimport normalizeURL from \"normalize-url\";\n\nexport default class SchemaLoader {\n  constructor(options) {\n    this.options = options || {};\n    this.requestOptions = this.options.requestOptions || {};\n  }\n\n  parseJSON(json) {\n    return JSON.parse(stripBOM(json));\n  }\n\n  loadLocalSchemaSync(filePath) {\n    const contents = fs.readFileSync(filePath, \"utf8\");\n    return this.parseJSON(contents);\n  }\n\n  loadRemoteSchema(uri) {\n    return new Promise((resolve, reject) => {\n      request(uri, this.requestOptions, (err, res, body) => {\n        if (err) {\n          return reject(new Error(`Failed to load schema \"${uri}\": ${err.message || err}`));\n        }\n        if (res.statusCode !== 200) {\n          return reject(new Error(`Failed to load schema \"${uri}\": HTTP status ${res.statusCode}`));\n        }\n        resolve(this.parseJSON(body));\n      });\n    });\n  }\n\n  loadRemoteSchemas(uris) {\n    return new Promise((resolve, reject) => {\n      const results = {};\n      const queue = Array.prototype.slice.call(uris);\n      const next = () => {\n        if (queue.length === 0) {\n          return resolve(results);\n        }\n\n        const uri = normalizeURL(queue.shift());\n        if (results.hasOwnProperty(uri)) return setImmediate(next);\n\n        this.loadRemoteSchema(uri)\n        .then(schema => {\n          results[uri] = schema;\n          setImmediate(next);\n        })\n        .catch(reject);\n      };\n      next();\n    });\n  }\n}\n"]}