"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

exports.default = gulpJsonSchema;

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _gulpUtil = require("gulp-util");

var _through = require("through2");

var _through2 = _interopRequireDefault(_through);

var _tv = require("tv4");

var _tv2 = _interopRequireDefault(_tv);

var _schemaValidator = require("./schema-validator");

var _schemaValidator2 = _interopRequireDefault(_schemaValidator);

var _validationReporter = require("./validation-reporter");

var _validationReporter2 = _interopRequireDefault(_validationReporter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PLUGIN_NAME = "gulp-json-schema";

function gulpJsonSchema(schema, options) {
  if (typeof options === "undefined" && (typeof schema === "undefined" ? "undefined" : (0, _typeof3.default)(schema)) === "object") {
    options = schema;
  } else {
    options = options || {};
    options.schema = schema;
  }
  if (!options.schema) {
    throw new _gulpUtil.PluginError(PLUGIN_NAME, "Schema is not specified");
  }

  var validator = void 0;
  var reporter = void 0;

  function eachFile(file, enc, callback) {
    if (file.isNull()) {
      return callback(null, file);
    }
    if (file.isStream()) {
      return callback(new _gulpUtil.PluginError(PLUGIN_NAME, "Stream file is not supported"));
    }

    if (!validator) {
      validator = new _schemaValidator2.default(options);
      reporter = new _validationReporter2.default(options);
    }

    validator.validateJSON(file.contents.toString("utf8")).then(function (result) {
      file.jsonSchemaResult = result;
      reporter.reportFile(file, result);
      callback(null, file);
    }).catch(function (err) {
      callback(new _gulpUtil.PluginError(PLUGIN_NAME, err.message || err));
    });
  }

  function endStream(callback) {
    if (reporter) {
      try {
        reporter.reportSummary();
        reporter.checkAllPassed();
      } catch (err) {
        return callback(new _gulpUtil.PluginError(PLUGIN_NAME, err.message || err));
      }
    }
    callback();
  }

  return _through2.default.obj(eachFile, endStream);
}
module.exports = exports['default'];
//# sourceMappingURL=gulp-json-schema.js.map