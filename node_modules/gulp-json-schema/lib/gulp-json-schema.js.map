{"version":3,"sources":["../src/gulp-json-schema.js"],"names":[],"mappings":";;;;;;;;;;kBASwB,c;;AATxB;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,cAAc,kBAApB;;AAEe,SAAS,cAAT,CAAwB,MAAxB,EAAgC,OAAhC,EAAyC;AACtD,MAAI,OAAO,OAAP,KAAmB,WAAnB,IAAkC,QAAO,MAAP,uDAAO,MAAP,OAAkB,QAAxD,EAAkE;AAChE,cAAU,MAAV;AACD,GAFD,MAEO;AACL,cAAU,WAAW,EAArB;AACA,YAAQ,MAAR,GAAiB,MAAjB;AACD;AACD,MAAI,CAAC,QAAQ,MAAb,EAAqB;AACnB,UAAM,0BAAgB,WAAhB,EAA6B,yBAA7B,CAAN;AACD;;AAED,MAAI,kBAAJ;AACA,MAAI,iBAAJ;;AAEA,WAAS,QAAT,CAAkB,IAAlB,EAAwB,GAAxB,EAA6B,QAA7B,EAAuC;AACrC,QAAI,KAAK,MAAL,EAAJ,EAAmB;AACjB,aAAO,SAAS,IAAT,EAAe,IAAf,CAAP;AACD;AACD,QAAI,KAAK,QAAL,EAAJ,EAAqB;AACnB,aAAO,SAAS,0BAAgB,WAAhB,EAA6B,8BAA7B,CAAT,CAAP;AACD;;AAED,QAAI,CAAC,SAAL,EAAgB;AACd,kBAAY,8BAAoB,OAApB,CAAZ;AACA,iBAAW,iCAAuB,OAAvB,CAAX;AACD;;AAED,cAAU,YAAV,CAAuB,KAAK,QAAL,CAAc,QAAd,CAAuB,MAAvB,CAAvB,EACC,IADD,CACM,kBAAU;AACd,WAAK,gBAAL,GAAwB,MAAxB;AACA,eAAS,UAAT,CAAoB,IAApB,EAA0B,MAA1B;AACA,eAAS,IAAT,EAAe,IAAf;AACD,KALD,EAMC,KAND,CAMO,eAAO;AACZ,eAAS,0BAAgB,WAAhB,EAA6B,IAAI,OAAJ,IAAe,GAA5C,CAAT;AACD,KARD;AASD;;AAED,WAAS,SAAT,CAAmB,QAAnB,EAA6B;AAC3B,QAAI,QAAJ,EAAc;AACZ,UAAI;AACF,iBAAS,aAAT;AACA,iBAAS,cAAT;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ,eAAO,SAAS,0BAAgB,WAAhB,EAA6B,IAAI,OAAJ,IAAe,GAA5C,CAAT,CAAP;AACD;AACF;AACD;AACD;;AAED,SAAO,kBAAQ,GAAR,CAAY,QAAZ,EAAsB,SAAtB,CAAP;AACD","file":"gulp-json-schema.js","sourcesContent":["import fs from \"fs\";\nimport { log, colors, PluginError } from \"gulp-util\";\nimport through from \"through2\";\nimport tv4 from \"tv4\";\nimport SchemaValidator from \"./schema-validator\";\nimport ValidationReporter from \"./validation-reporter\";\n\nconst PLUGIN_NAME = \"gulp-json-schema\";\n\nexport default function gulpJsonSchema(schema, options) {\n  if (typeof options === \"undefined\" && typeof schema === \"object\") {\n    options = schema;\n  } else {\n    options = options || {};\n    options.schema = schema;\n  }\n  if (!options.schema) {\n    throw new PluginError(PLUGIN_NAME, \"Schema is not specified\");\n  }\n\n  let validator;\n  let reporter;\n\n  function eachFile(file, enc, callback) {\n    if (file.isNull()) {\n      return callback(null, file);\n    }\n    if (file.isStream()) {\n      return callback(new PluginError(PLUGIN_NAME, \"Stream file is not supported\"));\n    }\n\n    if (!validator) {\n      validator = new SchemaValidator(options);\n      reporter = new ValidationReporter(options);\n    }\n\n    validator.validateJSON(file.contents.toString(\"utf8\"))\n    .then(result => {\n      file.jsonSchemaResult = result;\n      reporter.reportFile(file, result);\n      callback(null, file);\n    })\n    .catch(err => {\n      callback(new PluginError(PLUGIN_NAME, err.message || err));\n    });\n  }\n\n  function endStream(callback) {\n    if (reporter) {\n      try {\n        reporter.reportSummary();\n        reporter.checkAllPassed();\n      } catch (err) {\n        return callback(new PluginError(PLUGIN_NAME, err.message || err));\n      }\n    }\n    callback();\n  }\n\n  return through.obj(eachFile, endStream);\n}\n"]}